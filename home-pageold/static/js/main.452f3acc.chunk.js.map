{"version":3,"sources":["components/navbar.jsx","components/gamedata.js","components/tooldata.js","components/funstuffdata.js","components/header.jsx","components/description.jsx","components/gallery.jsx","App.js","serviceWorker.js","index.js"],"names":["NavDropDown","props","dropDown","items","map","item","key","name","href","url","Fragment","className","title","games","tools","funstuff","console","log","Header","Description","Gallery","App","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iOAkBeA,G,KAhBK,SAAAC,GAClB,IAAMC,EAAWD,EAAME,MAAMC,KAAI,SAAAC,GAAI,OACnC,uBAAGC,IAAKD,EAAKE,KAAMC,KAAMH,EAAKI,KAC3BJ,EAAKE,SAGV,OACE,kBAAC,IAAMG,SAAP,KACE,yBAAKC,UAAU,YACb,4BAAQA,UAAU,WAAWV,EAAMW,OACnC,yBAAKD,UAAU,oBAAoBT,OCA5BW,EAZD,CACZD,MAAO,QACPT,MAAO,CACL,CACEI,KAAM,uBACNE,IAAK,2CAEP,CAAEF,KAAM,gBAAiBE,IAAK,wCAC9B,CAAEF,KAAM,kBAAmBE,IAAK,0CCErBK,EAVD,CACZF,MAAO,QACPT,MAAO,CACL,CAAEI,KAAM,YAAaE,IAAK,4CAC1B,CAAEF,KAAM,aAAcE,IAAK,6CAC3B,CAAEF,KAAM,aAAcE,IAAK,+CAC3B,CAAEF,KAAM,mBAAoBE,IAAK,iDCQtBM,EAdE,CACfH,MAAO,QACPT,MAAO,CACL,CACEI,KAAM,qBACNE,IAAK,yDAEP,CACEF,KAAM,cACNE,IAAK,6BCJXO,QAAQC,IAAIF,GAKZ,IAYeG,EAZA,SAAAjB,GACb,OACE,iDAEE,6BACE,kBAAC,EAAgBY,GACjB,kBAAC,EAAgBC,GACjB,kBAAC,EAAgBC,MCJVI,MAXf,WACE,OACE,yBAAKR,UAAU,eACb,6SCCSS,EAJC,SAAAnB,GACd,OAAO,yBAAKU,UAAU,WAAf,iC,KCqBMU,MAlBf,WACE,OACE,kBAAC,IAAMX,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAKC,UAAU,mBACb,uBAAGA,UAAU,IAAb,iKAKA,yBAAKW,IAAI,0BAA0BC,IAAI,wBAEzC,kBAAC,EAAD,QCPcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.452f3acc.chunk.js","sourcesContent":["import React from \"react\";\n\nconst NavDropDown = props => {\n  const dropDown = props.items.map(item => (\n    <a key={item.name} href={item.url}>\n      {item.name}\n    </a>\n  ));\n  return (\n    <React.Fragment>\n      <div className=\"dropdown\">\n        <button className=\"dropbtn\">{props.title}</button>\n        <div className=\"dropdown-content\">{dropDown}</div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default NavDropDown;\n","const games = {\n  title: \"Games\",\n  items: [\n    {\n      name: \"Color Changing Tiles\",\n      url: \"https://teflassistant.com/colored-tiles\"\n    },\n    { name: \"Matching Game\", url: \"https://teflassistant.com/match-game\" },\n    { name: \"Where's The...?\", url: \"https://teflassistant.com/wheres-the\" }\n  ]\n};\n\nexport default games;\n","const tools = {\n  title: \"Tools\",\n  items: [\n    { name: \"Sentences\", url: \"https://teflassistant.com/tea-sentences/\" },\n    { name: \"Dictionary\", url: \"https://teflassistant.com/tea-dictionary/\" },\n    { name: \"Volunteers\", url: \"https://teflassistant.com/choose-a-student/\" },\n    { name: \"Pokemon Pronouns\", url: \"https://teflassistant.com/pokemon-pronouns/\" }\n  ]\n};\n\nexport default tools;\n","const funstuff = {\n  title: \"Stuff\",\n  items: [\n    {\n      name: \"Spongebob Dialogue\",\n      url: \"https://spongebob.fandom.com/wiki/List_of_transcripts\"\n    },\n    {\n      name: \"Song Lyrics\",\n      url: \"https://www.lyrics.com/\"\n    }\n  ]\n};\n\nexport default funstuff;\n","import React from \"react\";\nimport NavDropDown from \"./navbar\";\nimport games from \"./gamedata\";\nimport tools from \"./tooldata\";\nimport funstuff from \"./funstuffdata\";\nconsole.log(funstuff);\n\n// need to follow this guide... use fectch to call the endpoint which takes you back to express.\n// https://www.freecodecamp.org/news/how-to-make-create-react-app-work-with-a-node-backend-api-7c5c48acb1b0/\n\nconst Header = props => {\n  return (\n    <header>\n      TEFL Assistant\n      <nav>\n        <NavDropDown {...games} />\n        <NavDropDown {...tools} />\n        <NavDropDown {...funstuff} />\n      </nav>\n    </header>\n  );\n};\nexport default Header;\n","import React from \"react\";\n\nfunction Description() {\n  return (\n    <div className=\"description\">\n      <p>\n        TEFL Assistant will be a collection of simple games and tools to assist\n        \"Teachers of English as a Foreign Language\". It is largely based on my preferences, but as this site grows, there will be opportunity for people to submit their own materials to share with others.\n      </p>\n    </div>\n  );\n}\n\nexport default Description;\n","import React from \"react\";\n\nconst Gallery = props => {\n  return <div className=\"gallery\">Placeholder for screenshots.</div>;\n};\n\nexport default Gallery;\n","import React from \"react\";\nimport Header from \"./components/header\";\nimport Description from \"./components/description\";\nimport Gallery from \"./components/gallery\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Header />\n      <Description />\n      <div className=\"bookdescription\">\n        <p className=\"\">\n          Currently, I am using the Total English Book series. The tools are\n          based on the material in these 3 books, but I will be adding more\n          books as the site grows.\n        </p>\n        <img src=\"thumbs/totalenglish.png\" alt=\"total english book\"></img>\n      </div>\n      <Gallery />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}